{"version":3,"file":"/packages/stripe-meteor.js","sources":["stripe-meteor/stripe_server.js"],"names":[],"mappings":";;;;;;;;;AACA,wC;AACA,sC;;AAEA,uD;AACA,8D;;AAEA,+D;AACA,W;AACA,2D;;AAEA,W;AACA,6D;;AAEA,gB;AACA,yC;AACA,Y;AACA,6E;;AAEA,oC;;AAEA,8C;AACA,sF;AACA,oF;AACA,uB;AACA,c;AACA,qD;AACA,wE;AACA,uB;AACA,c;AACA,8C;AACA,qE;AACA,uB;AACA,c;AACA,yC;AACA,+E;AACA,uB;;AAEA,+B;AACA,mC;AACA,6B;AACA,gC;AACA,uB;AACA,+C;AACA,oC;AACA,oC;AACA,iB;AACA,oC;AACA,sC;AACA,6B;AACA,e;;AAEA,mC;AACA,2C;AACA,mC;AACA,+C;AACA,mD;AACA,iD;AACA,2C;AACA,iC;AACA,8B;AACA,e;AACA,sB;AACA,+B;AACA,S;AACA,M;AACA,4C;AACA,Y;AACA,kF;;AAEA,4C;;AAEA,qF;;AAEA,4B;AACA,6C;AACA,2C;;AAEA,qE;AACA,mC;AACA,uC;AACA,2D;AACA,oC;AACA,2B;AACA,6D;AACA,+D;AACA,4D;AACA,qB;AACA,6C;AACA,+C;AACA,8B;AACA,mE;AACA,qC;AACA,0B;AACA,oE;AACA,sC;AACA,qB;AACA,mB;;AAEA,6C;AACA,yC;AACA,mD;AACA,2D;AACA,4D;AACA,0D;AACA,2D;AACA,oC;AACA,qB;;AAEA,qC;AACA,e;AACA,oB;AACA,mF;AACA,iD;AACA,e;AACA,sB;AACA,+B;AACA,S;AACA,K;;AAEA,G","sourcesContent":["\n//var StripeAPI = Npm.require('stripe');\nvar StripeAPI = Npm.require('stripe');\n\n// VONVO PRIVATE KEY:  sk_test_ryTpkYFpQrkpeUG7g6p1ZULi\n// var Stripe = StripeAPI('sk_test_ryTpkYFpQrkpeUG7g6p1ZULi');\n\n// PENTASYLLABIC PRIVATE KEY:  sk_test_D75N4lmRPfpc49Ok4tLbwExF\n// test key\nvar Stripe = StripeAPI('sk_test_D75N4lmRPfpc49Ok4tLbwExF');\n\n// live key\n//var Stripe = StripeAPI('sk_live_VYj7PwFoUxJownwrgqawvnTb');\n\nMeteor.methods({\n    createNewCharge: function (options) {\n        try{\n            console.log('received a new charge: ' + JSON.stringify(options));\n\n            options = options || {};\n\n            // TODO:  add validation functions\n            //        if (!(typeof options.text === \"string\" && options.text.length)){\n            //            throw new Meteor.Error(400, \"Required parameter missing\");\n            //        }\n            //\n            //        if (options.text.length > 100){\n            //            throw new Meteor.Error(413, \"Title too long\");\n            //        }\n            //\n            //        if (! options.list_id ){\n            //            throw new Meteor.Error(413, \"No list id!\");\n            //        }\n            //\n            //        if (! this.userId){\n            //            throw new Meteor.Error(403, \"You must be logged in\");\n            //        }\n\n            var result = \"...\";\n            Stripe.charges.create({\n                amount: 2000,\n                currency: \"USD\",\n                card: {\n                    number: \"4242424242424242\",\n                    exp_month: \"03\",\n                    exp_year: \"2014\"\n                }\n            }, function (err, res) {\n                console.log(err, res);\n                result = res;\n            });\n\n            return Charges.insert({\n                CardType: options.CardType,\n                Name: options.Name,\n                CardNumber: options.CardNumber,\n                ExpiresMonth: options.ExpiresMonth,\n                ExpiresYear: options.ExpiresYear,\n                Security: options.Security,\n                Zip: options.Zip,\n                Result: result\n            });\n        }catch(error){\n            console.log(error);\n        }\n    },\n    validateCharge: function (rawFormData) {\n        try{\n            console.log('received a rawFormData: ' + JSON.stringify(rawFormData));\n\n            rawFormData = rawFormData || {};\n\n            //var validationObject = Mesosphere.creditCardForm.validate(rawFormData);\n\n            //var newCharge;\n            //if (!validationObject.errors) {\n                //console.log(\"no errors\");\n\n                //newCharge = processUser(validationObject.formData);\n                var result = \"...\";\n                Stripe.charges.create({\n                    amount: rawFormData.chargeAmount * 100,\n                    currency: \"USD\",\n                    card: {\n                        number: rawFormData.creditCardNumber,\n                        exp_month: rawFormData.creditCardMonth,\n                        exp_year: rawFormData.creditCardYear\n                    }\n                }, function (error, result) {\n                    console.log(error, result);\n                    if(error){\n                        console.log('Stripe returned an error...');\n                        return error;\n                    }else{\n                        console.log('Stripe returned an result...');\n                        return result;\n                    }\n                });\n\n//                //db.users.insert(newUser);\n//                return Charges.insert({\n//                    Name: options.creditCardName,\n//                    CardNumber: options.creditCardNumber,\n//                    ExpiresMonth: options.creditCardMonth,\n//                    ExpiresYear: options.creditCardYear,\n//                    Security: options.creditCardSecurity,\n//                    Result: result\n//                });\n\n            //    return('success!');\n            //}\n            //else {\n            //    console.log(\"errors:\" + JSON.stringify(validationObject.errors));\n            //    return validationObject.errors;\n            //}\n        }catch(error){\n            console.log(error);\n        }\n    }\n\n});"]}